<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- id = 변수명 class = 실제 클래스 위치 -->
<!-- 	ACar car = new ACar(); -->
<!-- 	<bean id="car" class="spring.di.car.ACar" /> -->
	<!-- BCar car = new BCar(); -->
<!-- 	<bean id="car" class="spring.di.car.BCar" /> -->
	<!-- Tire1 tire = new Tire1(); -->	
<!-- 	<bean id="tire" class="spring.di.car.Tire1" /> -->
	<!-- Tire2 tire = new Tire2(); -->	
<!-- 	<bean id="tire" class="spring.di.car.Tire2" /> -->

	<!-- @Annotaion 자동 주입 사용하게 만들어줌 -->
	<context:annotation-config/>
	<context:component-scan base-package="spring.di.car"/>
	

	<!-- BCar car = new BCar(); -->
<!-- 	<bean id="car" class="spring.di.car.BCar"> -->
		<!-- car.setT(new Tire1()); -->
<!-- 		<property name="t" ref="tire"></property> -->
<!-- 		<property name="t"> -->
<!-- 			<ref bean="tire"/> -->
<!-- 		</property> -->
<!-- 	</bean> -->
	
	<!-- @Autowired는 id 여부 상관 X (타입으로 찾기 때문), 단 타입이 여러 개인 경우 Qualifier("id값")을 이용하여 적용 필요 -->
<!-- 	<bean id="car" class="spring.di.car.BCar"/> -->
<!-- 	<bean id="t1" class="spring.di.car.Tire1" /> -->
<!-- 	<bean id="t2" class="spring.di.car.Tire2" /> -->
</beans>

<!-- 
	Spring Framework 설정
	  1. xml 설정 방법 (구형 방식)
	  	- markup langauge (열고 닫는 태그 존재)
	  	- 속성(dtd) 설정을 통해 태그 사용 가능
	  	- JSON과 비교해서 설명이 됨 (데이터를 전송하기 위한 수단이나, Spring에서는 설정 파일로만 사용됨)
	  	
	  2. java (@annotation) 이용 방법 (신형 방식) -> pojo에서 @annotation만을 이용해서 다양하게 변화 가능
	  	- 
 -->